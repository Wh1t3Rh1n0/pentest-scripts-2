#!/usr/bin/env -S python3

import json
import csv
import sys

banner = f"""
trufflehog-json2csv.py - by Wh1t3Rh1n0
----------------------

Converts TruffleHog JSON output to a CSV file.

Usage: {sys.argv[0]} <INPUT FILE> <OUTPUT FILE> [Excluded file extensions]

Example:

    {sys.argv[0]} trufflehog.json output.csv .dll .exe .png .jpg

TruffleHog command used to generate the JSON file referenced above:

    ./trufflehog filesystem --json $PWD/input-files/ | tee trufflehog.json

"""

if '-h' in sys.argv or '--help' in sys.argv or len(sys.argv) < 3:
    print(banner)
    exit()

input_file=sys.argv[1]
output_file=sys.argv[2]

if len(sys.argv) > 3:
    excluded_extensions = sys.argv[3:]
else:
    excluded_extensions = []


with open(input_file, 'r') as _f:
    raw_data = _f.read()
    raw_data = raw_data.replace("\n",",")
    if raw_data[-1] == ',': raw_data = raw_data[0:-1]
    raw_data = '[' + raw_data + ']'

json_data = json.loads(raw_data)

print(f'{len(json_data)} records loaded.')


def strip_non_ascii(string):
    ''' Returns the string without non ASCII characters'''
    stripped = (c for c in string if 0 < ord(c) < 127)
    return ''.join(stripped)



def hashcat_string(string):
    '''Returns strings containing non-ASCII characters as Hashcat-formatted hexadecimal strings.'''
    for c in string:
        if 0 < ord(c) < 127: continue
        #else: return bytes(string,'utf-8')
        
        else:
            hex_data = bytes(string,'utf-8').hex()
            return f"$HEX[{hex_data}]"
        
    return str(string)



def safe_string(string):
    '''Escapes non-ASCII characters if any are in the string.'''
    for c in string:
        if 0 < ord(c) < 127: continue
        else: return bytes(string,'utf-8')
    return str(string)


output_records_count = 0

def match_extension(needle, haystack):
    extension_length = 0 - len(needle)
    haystack_extension = haystack[extension_length:]
    
    #print(needle,haystack,haystack_extension)
    
    if needle.lower() == haystack_extension.lower():
        return True
    else:
        return False
        
        
def match_list(needle_list, haystack):
    for needle in needle_list:
        if match_extension(needle, haystack):
            return True
    return False

with open(output_file, 'w', newline='') as csvfile:

    spamwriter = csv.writer(csvfile, delimiter=',',
                            quotechar='"', quoting=csv.QUOTE_MINIMAL)

    spamwriter.writerow(['File','SourceID','SourceType','SourceName','DetectorType','DetectorName','DecoderName','Verified','Raw-Hashcat','Raw-Escaped','RawV2','Redacted','ExtraData','StructuredData'])

    for n in json_data:
    
        file_name = n['SourceMetadata']['Data']['Filesystem']['file']
        
        if match_list(excluded_extensions, file_name):
            continue
        
    
        spamwriter.writerow([
            str(n['SourceMetadata']['Data']['Filesystem']['file']),
            str(n['SourceID']),
            str(n['SourceType']),
            str(n['SourceName']),
            str(n['DetectorType']),
            str(n['DetectorName']),
            str(n['DecoderName']),
            str(n['Verified']),
            hashcat_string(n['Raw']),
            safe_string(n['Raw']),
            safe_string(n['RawV2']),
            str(n['Redacted']),
            str(n['ExtraData']),
            str(n['StructuredData']),
        ])
                       
        output_records_count = output_records_count + 1
                       
print("DONE!")
print(f'{output_records_count} records written to "{output_file}".')
